import { Themes } from './types';
/**
 * A MutationObserver which watches the `<html>` element for changes to the theme.
 *
 * In React, use the {@link useThemeObserver `useThemeObserver`} hook instead.
 *
 * @param {function} callback - A callback function which fires when the theme changes.
 *
 * @example
 * ```
 * const observer = new ThemeMutationObserver((theme) => {});
 * observer.observe();
 * ```
 */
export declare class ThemeMutationObserver {
    private callback;
    observer: MutationObserver | null;
    constructor(callback: (theme: Themes | null) => unknown);
    observe(): void;
    disconnect(): void;
}
/**
 * A React hook which returns the current theme set on `<html>`, or `null` if not set.
 *
 * @example
 * ```
 * const theme = useThemeObserver(); // Returns 'light' or 'dark'
 *
 * // Performing side effects when it changes
 * useEffect(() => {
 *   console.log(`The theme has changed to ${theme}`);
 * }, [theme]);
 * ```
 */
export declare const useThemeObserver: () => Themes | null;
