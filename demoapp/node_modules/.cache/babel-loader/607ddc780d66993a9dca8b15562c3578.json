{"ast":null,"code":"var _jsxFileName = \"D:\\\\CODEGYM\\\\CODEGYM\\\\REACTJS\\\\duonghuuthanh\\\\demoapp\\\\src\\\\DemoReactRedux.js\",\n    _s = $RefreshSig$();\n\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst DemoReactRedux = () => {\n  _s();\n\n  /**\r\n   * (alias) useSelector<unknown, any>(selector: (state: unknown) => any, equalityFn?: EqualityFn<any> | undefined): any\r\n      import useSelector\r\n      A hook to access the redux store's state. This hook takes a selector function as an argument. The selector is called with the store state.\r\n        This hook takes an optional equality comparison function as the second parameter that allows you to customize the way the selected state \r\n      is compared to determine whether the component needs to be re-rendered.\r\n   */\n  const counter = useSelector(state => {\n    console.log(state);\n    return state.number;\n  });\n  console.log(counter);\n  const dispatch = useDispatch();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Main APP\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"My value: \", counter]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => dispatch({\n        \"type\": \"inc\"\n      }),\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => dispatch({\n        \"type\": \"dec\"\n      }),\n      children: \"-\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(DemoReactRedux, \"kekweKlgGDYl7VGjQQ+BKXXb0Ho=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = DemoReactRedux;\nexport default DemoReactRedux;\n\nvar _c;\n\n$RefreshReg$(_c, \"DemoReactRedux\");","map":{"version":3,"names":["useDispatch","useSelector","DemoReactRedux","counter","state","console","log","number","dispatch"],"sources":["D:/CODEGYM/CODEGYM/REACTJS/duonghuuthanh/demoapp/src/DemoReactRedux.js"],"sourcesContent":["\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\nconst DemoReactRedux = ()=>{\r\n    /**\r\n     * (alias) useSelector<unknown, any>(selector: (state: unknown) => any, equalityFn?: EqualityFn<any> | undefined): any\r\n        import useSelector\r\n        A hook to access the redux store's state. This hook takes a selector function as an argument. The selector is called with the store state.\r\n\r\n        This hook takes an optional equality comparison function as the second parameter that allows you to customize the way the selected state \r\n        is compared to determine whether the component needs to be re-rendered.\r\n     */\r\n    const counter = useSelector(state=> {\r\n        console.log(state)\r\n        return state.number\r\n    });\r\n    console.log(counter)\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <>\r\n            <h1>Main APP</h1>\r\n            <h2>My value: {counter}</h2>\r\n            <button onClick={()=> dispatch({\"type\": \"inc\"})} >+</button>\r\n            <button onClick={()=> dispatch({\"type\": \"dec\"})}>-</button>\r\n        </>\r\n    );\r\n}\r\nexport default DemoReactRedux"],"mappings":";;;AACA,SAAQA,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;;;;AAEA,MAAMC,cAAc,GAAG,MAAI;EAAA;;EACvB;AACJ;AACA;AACA;AACA;AACA;AACA;EAEI,MAAMC,OAAO,GAAGF,WAAW,CAACG,KAAK,IAAG;IAChCC,OAAO,CAACC,GAAR,CAAYF,KAAZ;IACA,OAAOA,KAAK,CAACG,MAAb;EACH,CAH0B,CAA3B;EAIAF,OAAO,CAACC,GAAR,CAAYH,OAAZ;EACA,MAAMK,QAAQ,GAAGR,WAAW,EAA5B;EACA,oBACI;IAAA,wBACI;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,eAEI;MAAA,yBAAeG,OAAf;IAAA;MAAA;MAAA;MAAA;IAAA,QAFJ,eAGI;MAAQ,OAAO,EAAE,MAAKK,QAAQ,CAAC;QAAC,QAAQ;MAAT,CAAD,CAA9B;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAHJ,eAII;MAAQ,OAAO,EAAE,MAAKA,QAAQ,CAAC;QAAC,QAAQ;MAAT,CAAD,CAA9B;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAJJ;EAAA,gBADJ;AAQH,CAvBD;;GAAMN,c;UAScD,W,EAKCD,W;;;KAdfE,c;AAwBN,eAAeA,cAAf"},"metadata":{},"sourceType":"module"}